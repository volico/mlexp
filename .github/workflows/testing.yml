name: Pull request linting and testing

on:
  push:
    branches: [ "develop", "master" ]
  pull_request:
    branches: [ "develop", "master" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            code:
              - 'mlexp/**'
              - 'test/**'
              - 'requirements.txt'
              - 'requirements-dev.txt'
              - 'requirements-extra.txt'
              - 'setup.py'
            docs:
              - 'docs/**'
      - name: Set up Python 3.9.*
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.*"
      - name: Linting with ufmt
        uses: omnilib/ufmt@action-v1
        with:
          path: .
          version: 2.0.1

  find_changes:

    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.code }}

    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            code:
              - 'mlexp/**'
              - 'test/**'
              - 'requirements.txt'
              - 'requirements-dev.txt'
              - 'requirements-extra.txt'
              - 'setup.py'
            docs:
              - 'docs/**'

  test:

    runs-on: ubuntu-latest
    needs: [find_changes]
    if: needs.find_changes.outputs.code == 'true'

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9.*
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.*"
      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[torch]
          pip install -r requirements-dev.txt
      - name: Preparing for testing (starting mlflow server, setting neptune api token)
        run: |
          mlflow server &
          sleep 10s
          echo "NEPTUNE_API_TOKEN=${{ secrets.NEPTUNE_API_TOKEN }}" >> $GITHUB_ENV
      - name: Testing code and docs
        run: |
          coverage run -m pytest --neptune_project ${{ secrets.NEPTUNE_PROJECT }}
          coverage xml -i
      - name: Test Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: True
          thresholds: '75 90'
          hide_branch_rate: True
          hide_complexity: True
          format: 'markdown'
          output: 'both'
      - name: Add test coverage report to PR comments
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      - name: Add test coverage report to job summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  test_docs:

    runs-on: ubuntu-latest
    needs: [find_changes]
    if: needs.find_changes.outputs.code == 'false' && needs.find_changes.outputs.docs == 'true'

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9.*
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.*"
      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[torch]
          pip install -r requirements-dev.txt
      - name: Test only docs
        run: |
          pytest tests/test_docs --neptune_project ${{ secrets.NEPTUNE_PROJECT }}
